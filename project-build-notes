CLI Data Gem Portfolio Project

### The most intimidating thing to a programmer is a blank file! (How and where to start) ###
### Always want to start programming from the place where the user is going to interact with it. ###
### User is going to type Trail_Finder and that command will "run" my program. ###

CLI App Name: Trail Finder

Description: CLI App for Mountain Bikers use in finding local Mountain Biking Trails to ride.


When Trail Finder runs it will:

User types Trail_Finder --- This runs the program (file). So the "executable" (./bin/trail-finder) the file the user is running, goes in the bin directory.
So the first file you want to make is Trail_Finder and it goes in the bin directory. Make it in the bin directory!

1. Welcome the user - with instuctions for use to find mountain bike trails 
                      in the Bend area.

2. Prompt user to select/enter "List Trails".

3. Return a list of mountain biking trails in the Bend area.

4. Prompt user to select/enter "Trail Name - Information" for information about the trail the user is interested in. 

5. List information about the selected trail, to include trail condition,
   (open/closed, riding well), trail length, and trail elevation.

6. Prompt user to select/enter "Trail Name - Description" for a detailed description of the trail the user is interested in.

7. Return detailed description of the trail selected.

8. Prompt user to select/enter another "Trail Name - Information" or select/enter "exit" to quit app. 

6. Thank the user for using Trail Finder and "Have a great ride!



Basic outline notes on how to build CLI Gem:

1. Plan gem, imagine how the interface (cli-controller.rb) will work.
2. Start with project structure - google.
3. Start with the entry point - file run.
4. File run should build the CLI interface.
5. Stub out the interface.
6. Start making things real.
7. Discover objects.
8. Program.



Trail Finder Domain:

class CLIController
class Scraper
class Trail             

Note - scraping to create new objects (instances of class Trail/instances of class SkillLevel) with the data scraped.

What is a trail?

A trail has a name
A trail has a condition
A trail has a length 
A trail has an elevation
A trail has an url 
A trail has a description



Build stategy notes:

Keep it simple but effective in meeting requirements.

Remember the single responsibility principle. Each piece of code -
method, class, etc. is responsible for one thing. The CLI Controller 
is resposible for interfacing with the user, if you are puts or gets
input anywhere else in the program, you are violating the single
responsibility principle.

Build the CLI first using hard coded fake data. The CLI will determine
needs and how to build the other models in the domain.

Use Colorize gem to color the text of the trail names according to skill level
beginner-green, intermediate-blue, expert-red.

Write code that is prepared to deal with nonsense text, negative numbers,
blank or incorrect input. During project assessment they will try to 
break your code with these.

The core of the project is:

object orientation
object collaboration
using data (scraped) to create new objects with the data acquired

Supporting Website: https://bendtrails.org/

Focus on "East of Bend" section only.


