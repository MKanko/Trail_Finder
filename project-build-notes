CLI Data Gem Portfolio Project

### The most intimidating thing to a programmer is a blank file! (How and where to start) ###
### Always want to start programming from the place where the user is going to interact with it. ###
### User is going to type ./bin/trail-finder and that command will "run" my program. ###

CLI App Name: Trail Finder

Description: CLI App for Mountain Bikers use in finding local Mountain Biking Trails to ride.

“Build an app that uses collaborating object classes to interact with a user, acquire external data on request, 
use that data to create instances of objects with attributes and store those “smart” objects for use, and then 
return those objects, which know their attributes, to provide information, on demand, in a practical way to the user."


When Trail Finder runs it will:

User types ./bin/trail-finder --- This runs the program (file). So the "executable" (./bin/trail-finder) the file the user is running, goes in the bin directory.
So the first file you want to make is trail-finder and it goes in the bin directory. Make it in the bin directory!

1. Welcome the user - with instuctions for use to find mountain bike trails 
                      in the Bend area.

2. Prompt user to select/enter the distance they would like to ride (short, medium, long) or list trails (to view all trails).

3. Return a list of trails that match the users trai length input, short (0-5 miles), medium (bewtween 5-10 mile) and long(over 10 miles),
or return a list of all trails.

4. Prompt user to select/enter the number of a trail to view information about the trail the user is interested in. 

5. List information about the selected trail, to include trail condition,
   (open/closed, riding well), trail length, and trail elevation.

6. Prompt user to type 'description' to view a detailed description of the trail (last trail selected) the user is interested in.

7. Return detailed description of the trail selected.

8. Prompt user to select/enter the number of another trail, select a different distance, list trails or select/enter "exit" to quit app. 

6. Thank the user for using Trail Finder and "Have a great ride!



Basic outline notes on how to build CLI Gem:

1. Plan gem, imagine how the interface (cli-controller.rb) will work.
2. Start with project structure - google.
3. Start with the entry point - file run.
4. File run should build the CLI interface.
5. Stub out the interface.
6. Start making things real.
7. Discover objects.
8. Program.



Trail Finder Domain:

class CLIController
class Scraper
class Trail             

Note - scraping to create new objects (instances of class Trail/instances of class SkillLevel) with the data scraped.

What is a trail?

A trail has a name
A trail has a condition
A trail has a length 
A trail has an elevation
A trail has an url 
A trail has a description



Build stategy notes:

Keep it simple but effective in meeting requirements.

Remember the single responsibility principle. Each piece of code -
method, class, etc. is responsible for one thing. The CLI Controller 
is resposible for interfacing with the user. For example, if you are puts or gets
input anywhere else in the program, you are violating the single
responsibility principle.

Build the CLI first using hard coded fake data. The CLI will determine
needs and how to build the other models in the domain.

Use Colorize gem to color the text to differentiate (visual separation) between prompts, information returned (outputted), and headers.

Write code that is prepared to deal with nonsense text, negative numbers,
blank or incorrect input. During project assessment they will try to 
break your code with these.

The core of the project is:

object orientation
object collaboration
using data (scraped) to create new objects with the data acquired

Supporting Website: https://bendtrails.org/

Focus on "East of Bend" section only.


